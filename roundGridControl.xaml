<UserControl
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	x:Class="BoardDesigner.roundGridControl"
	x:Name="UserControl"
	d:DesignWidth="300" d:DesignHeight="300">
	<UserControl.Resources>
		<Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<Rectangle x:Name="Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" SnapsToDevicePixels="True"/>
							<Polygon x:Name="Arrow" Fill="Black" HorizontalAlignment="Right" Margin="8,8,3,3" Opacity="0.15" Points="0,10 10,10 10,0" Stretch="Uniform" VerticalAlignment="Bottom"/>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Stroke" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="True">
								<Setter Property="Fill" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Visibility" TargetName="Arrow" Value="Collapsed"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<Style x:Key="RoundCornerDataGridStyle" TargetType="{x:Type DataGrid}">
			<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
			<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			<Setter Property="BorderBrush" Value="#FF688CAF"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
			<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
			<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
			<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type DataGrid}">
						<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True" CornerRadius="10">
							<ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
								<ScrollViewer.Template>
									<ControlTemplate TargetType="{x:Type ScrollViewer}">
										<Grid>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="Auto"/>
												<ColumnDefinition Width="*"/>
												<ColumnDefinition Width="Auto"/>
											</Grid.ColumnDefinitions>
											<Grid.RowDefinitions>
												<RowDefinition Height="Auto"/>
												<RowDefinition Height="*"/>
												<RowDefinition Height="Auto"/>
											</Grid.RowDefinitions>
											<Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
											<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
											<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="1"/>
											<ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
											<Grid Grid.Column="1" Grid.Row="2">
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
													<ColumnDefinition Width="*"/>
												</Grid.ColumnDefinitions>
												<ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
											</Grid>
										</Grid>
									</ControlTemplate>
								</ScrollViewer.Template>
								<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</ScrollViewer>
						</Border>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="IsGrouping" Value="true"/>
						<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
					</MultiTrigger.Conditions>
					<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
				</MultiTrigger>
			</Style.Triggers>
		</Style>
	</UserControl.Resources>

	<Grid x:Name="LayoutRoot">
		<DataGrid x:Name="uGrid"
			Width="{Binding Size.Width}" Height="{Binding Size.Height}" BorderThickness="{Binding Border.BorderThickness}" 
			BorderBrush="{Binding Border.BorderBrush}" Visibility="{Binding Visibility}" Margin="{Binding Position.Margin}" 
			Padding="{Binding Position.Padding}"  Opacity="{Binding Opacity}" HorizontalAlignment="{Binding HorizontalAlignment}" VerticalAlignment="{Binding VerticalAlignment}"
			AlternatingRowBackground="{Binding AlternatingRowBackground}" AlternationCount="{Binding AlternationCount}" ColumnWidth="*"
			CanUserReorderColumns="{Binding CanUserReorderColumns}" CanUserResizeColumns="{Binding CanUserResizeColumns}" CanUserSortColumns="{Binding CanUserSortColumns}"
			IsReadOnly="{Binding IsReadOnly}" HeadersVisibility="{Binding HeadersVisibility}" AutoGenerateColumns="{Binding AutoGenerateColumns}" Style="{DynamicResource RoundCornerDataGridStyle}" Background="{x:Null}"
                  >
            
			<DataGrid.ColumnHeaderStyle>
				<Style TargetType="{x:Type DataGridColumnHeader}" >
					<Setter Property="Padding" Value="{Binding HeaderaPadding}" />
					<Setter Property="Background" Value="{Binding HeaderBackground}"/>
					<Setter Property="FontFamily" Value="{Binding HeaderFont.FontFamily}"/>
					<Setter Property="Foreground" Value="{Binding HeaderFont.FontColor}"/>
					<Setter Property="FontSize" Value="{Binding HeaderFont.FontSize}" />
					<Setter Property="Height" Value="{Binding HeaderHeight}" />
					<Setter Property="BorderThickness" Value="{Binding HeaderBorder.BorderThickness}" />
					<Setter Property="BorderBrush" Value="{Binding HeaderBorder.BorderBrush}" />
					<Setter Property="HorizontalContentAlignment" Value="{Binding HeaderHorizontalContentAlignment}"/>
					<Setter Property="VerticalContentAlignment" Value="{Binding HeaderVerticalContentAlignment}"/>
					<Setter Property="FontWeight" Value="{Binding HeaderFont.FontWeight}"/>
					<Setter Property="FontStyle" Value="{Binding HeaderFont.FontStyle}"/>
					<!--<Setter Property="TextBlock.HorizontalAlignment" Value="Center"></Setter>
                    <Setter Property="TextBlock.VerticalAlignment" Value="Center"></Setter>-->
				</Style>
			</DataGrid.ColumnHeaderStyle>
			<DataGrid.RowStyle>
				<Style TargetType="{x:Type DataGridRow}">
					<Setter Property="Background" Value="{Binding RowBackground}" />
					<Setter Property="Foreground" Value="{Binding RowFont.FontColor}" />
					<Setter Property="FontSize" Value="{Binding RowFont.FontSize}" />
					<Setter Property="FontWeight" Value="{Binding RowFont.FontWeight}"/>
					<Setter Property="FontStyle" Value="{Binding RowFont.FontStyle}"/>
					<Setter Property="Height" Value="{Binding RowHeight}" />
					<Setter Property="BorderThickness" Value="{Binding RowBorder.BorderThickness}" />
					<Setter Property="BorderBrush" Value="{Binding RowBorder.BorderBrush}" />
					<Setter Property="HorizontalAlignment" Value="{Binding RowHorizontalAlignment}"/>
					<Setter Property="VerticalAlignment" Value="{Binding RowVerticalAlignment}"/>
				</Style>
			</DataGrid.RowStyle>
			<DataGrid.CellStyle>
				<Style TargetType="{x:Type DataGridCell}">
					<Setter Property="Background" Value="{Binding CellBackground}" />
					<Setter Property="HorizontalContentAlignment" Value="{Binding CellHorizontalAlignment}"/>
					<Setter Property="VerticalContentAlignment" Value="{Binding CellVerticalAlignment}"/>
					<Setter Property="BorderThickness" Value="{Binding CellBorder.BorderThickness}" />
					<Setter Property="BorderBrush" Value="{Binding CellBorder.BorderBrush}" />                  
				</Style>
			</DataGrid.CellStyle>
		</DataGrid>
	</Grid>
</UserControl>